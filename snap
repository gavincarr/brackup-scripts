#!/usr/bin/perl
#
# Script to create LVM snapshots quickly and easily
#

use strict;
use File::Basename;
use Getopt::Long qw(:config no_ignore_case bundling);
use IPC::Run3;

# Defaults
my $size = '250G';

my $me = basename($0);
sub usage {
  die "usage: $me [-v] [-n] [-S <snapshot_size>] [-s <snapshot_mountpoint] <mountpoint>\n";
}

my ($help, $lv, $vg, $snap_mp, $noop, $verbose);
usage unless GetOptions(
  'help|h|?'        => \$help,
  'snap|s=s'        => \$snap_mp,
  'noop|n'          => \$noop,
  'size|S=s'        => \$size,
  'verbose|v'       => \$verbose,
);
usage if $help;
usage unless @ARGV == 1;

my $mp = shift @ARGV;
$mp = "/$mp" unless substr($mp,0,1) eq '/';
$snap_mp ||= $mp . '_snap';

# Derive $lv and $vg from mountpoint
# Quick and dirty 'mount(1)' hacking - should really be/use a CPAN module
my ($vg, $lv);
my @mount = split /\n/, qx(mount);
die "Error: cannot get mounted filesystems\n" unless @mount;

my @mount_entry = grep { my @elt = split /\s+/, $_; ($elt[2]||'') eq $mp } @mount
  or die "Error: cannot find mount entry for mountpoint $mp\n";
@mount_entry == 1
  or die "Error: found multiple mountpoints for mountpoint '$mp'\n";
my $mount_entry = shift @mount_entry;

my $mount_dev = (split /\s+/, $mount_entry)[0]
  or die "Error: cannot find mount device in mount entry '$mount_entry'\n";
if ($mount_dev =~ m! ^/dev/mapper/([^/]+)$ !x) {
  my $vg_lv = $1;
  my @elt = split m/ (?<!-) - (?!-) /x, $vg_lv;
  die "Error: cannot split mapped VG/LV element '$vg_lv' in two on hyphens\n"
    if @elt != 2;
  ($vg, $lv) = @elt;
  # Reduce multiple hyphens (?)
  $vg =~ s/--+/-/g;
  $lv =~ s/--+/-/g;
}
elsif ($mount_dev =~ m! ^/dev/([^/]+)/([^/]+)$ !x) {
  $vg = $1;
  $lv = $2;
}
else {
  die "Error: cannot derive VG and/or LV from device '$mount_dev'\n";
}

my $lv_snap = $lv . '_snap';
my $dev = "/dev/$vg/$lv";
my $dev_snap = "/dev/$vg/$lv_snap";

if ($verbose || $noop) {
  print STDERR "+ [ snap parameters ]\n";
  print STDERR "+ mp $mp\n";
  print STDERR "+ snap_mp: $snap_mp\n";
  print STDERR "+ vg: $vg\n";
  print STDERR "+ lv: $lv\n";
  print STDERR "+ lv_snap: $lv_snap\n";
  print STDERR "+ dev: $dev\n";
  print STDERR "+ dev_snap: $dev_snap\n";
  print STDERR "+ size: $size\n";
}

my $run = sub {
  my $cmd = shift;

  print STDERR "+ cmd: $cmd\n" if $verbose || $noop;
  return if $noop;

  my @cmd = split /\s+/, $cmd;
  run3(\@cmd, \undef)
    or die "'$cmd' failed, returning $!\n";
};

# Snap mode
if ($me eq 'snap') {

  # Create snapshot
  $run->("lvcreate -L$size --snapshot --permission r -n $lv_snap $dev");

  # Mount snapshot
  $run->("mount -o ro $dev_snap $snap_mp");

  # Report
  print "Snapshot mounted at $snap_mp\n" unless $noop;
}

# Unsnap mode
elsif ($me eq 'unsnap') {
  # Unmount if mounted
  my $mount_list;
  run3([ 'mount' ], \undef, \$mount_list);
  if ($mount_list =~ m{ on $snap_mp\b}ms) {
    $run->("umount -f $snap_mp");
  }

  # Remove snapshot
  $run->("lvremove -f $dev_snap");

  # Report
  print "Snapshot $snap_mp removed\n" unless $noop;
}

else {
  die "Unknown snap mode '$me'\n";
}

print STDERR "+ // end snap\n" if $verbose || $noop;

